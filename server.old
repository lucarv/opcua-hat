const imu = require("node-sense-hat").Imu;
const IMU = new imu.IMU();

var imudata;
const collect = () => {
  IMU.getValue((err, data) => {
    if (err !== null) {
      console.error("Could not read sensor data: ", err);
      return;
    } else {
      imudata = data;
    }
  });
}

const addHatVars = () => {
  /**
   * returns TEMPERATURE
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=temperature", // a string nodeID
    browseName: "Temperature",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.temperature
        });
      }
    }
  });

  /**
   * returns HUMIDITY
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=humidity", // a string nodeID
    browseName: "Humidity",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.humidity
        });
      }
    }
  });

  /**
   * returns PRESSURE
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=pressure", // a string nodeID
    browseName: "Pressure",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.pressure
        });
      }
    }
  });

  /**
   * returns ACCELEROMETER
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=accel-x", // a string nodeID
    browseName: "Accelerometer X",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.accel.x
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=accel-y", // a string nodeID
    browseName: "Accelerometer Y",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.accel.y
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=accel-z", // a string nodeID
    browseName: "Accelerometer Z",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.accel.z
        });
      }
    }
  });

  /**
   * returns GYROSCOPE  
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=gyro-x", // a string nodeID
    browseName: "Gyro X",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.gyro.x
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=gyro-y", // a string nodeID
    browseName: "Gyro Y",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.gyro.y
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=gyro-z", // a string nodeID
    browseName: "Gyro Z",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.gyro.z
        });
      }
    }
  }); 

  /**
   * returns COMPASS
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=compass-x", // a string nodeID
    browseName: "Compass X",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.compass.x
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=compass-y", // a string nodeID
    browseName: "Compass Y",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.compass.y
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=compass-z", // a string nodeID
    browseName: "Compass Z",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.compass.z
        });
      }
    }
  });  

  /**
   * returns FUSION
   * @return {double}
   */
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=fusion-x", // a string nodeID
    browseName: "Fusion X",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.fusionPose.x
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=fusion-y", // a string nodeID
    browseName: "Fusion Y",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.fusionPose.y
        });
      }
    }
  });
  namespace.addVariable({
    componentOf: device,
    nodeId: "s=fusion-z", // a string nodeID
    browseName: "Fusion Z",
    dataType: "Double",
    value: {
      get: function () {
        return new opcua.Variant({
          dataType: opcua.DataType.Double,
          value: imudata.fusionPose.z
        });
      }
    }
  }); 
}

const opcua = require("node-opcua");
require('dotenv').config()
const os = require('os')
// config server from env vars
var host = process.env.HOST
var port = parseInt(process.env.PORT)
var resourcePath = process.env.RESOURCEPATH
const server = new opcua.OPCUAServer({
  hostname: host,
  port: port, // the port of the listening socket of the server
  resourcePath: resourcePath, // this path will be added to the endpoint resource name
  buildInfo: {
    productName: "LucaHatServer",
    buildNumber: "0001",
    buildDate: new Date(2020, 9, 15)
  }
});
var addressSpace, namespace, device;

function post_initialize() {
  console.log("OPCUA Server initialized");

  function construct_my_address_space(server) {
    addressSpace = server.engine.addressSpace;
    namespace = addressSpace.getOwnNamespace();

    // declare a new object
    device = namespace.addObject({
      organizedBy: addressSpace.rootFolder.objects,
      browseName: "Pi2WithHat"
    });


    /**
     * returns the percentage of free memory on the running machine
     * @return {double}
     */
    function available_memory() {
      // var value = process.memoryUsage().heapUsed / 1000000;
      const percentageMemUsed = os.freemem() / os.totalmem() * 100.0;
      return percentageMemUsed;
    }
    namespace.addVariable({
      componentOf: device,
      nodeId: "s=free_memory", // a string nodeID
      browseName: "FreeMemory",
      dataType: "Double",
      value: {
        get: function () {
          return new opcua.Variant({
            dataType: opcua.DataType.Double,
            value: available_memory()
          });
        }
      }
    });

    addHatVars();
  }

  construct_my_address_space(server);
  server.start(function () {
    console.log("Server is now listening ... ( press CTRL+C to stop)");
    const endpointUrl = server.endpoints[0].endpointDescriptions()[0].endpointUrl;
    console.log(" the primary server endpoint url is: ", endpointUrl);
  });
}

const start = () => {
  console.log(' start collecting sensor data');
  collector = setInterval(collect, 1000);
  server.initialize(post_initialize);
}

start();

/*
const display = () => {
  console.log("Accelleration is: ", JSON.stringify(imudata.accel, null, "  "));
  console.log("Gyroscope is: ", JSON.stringify(imudata.gyro, null, "  "));
  console.log("Compass is: ", JSON.stringify(imudata.compass, null, "  "));
  console.log("Fusion data is: ", JSON.stringify(imudata.fusionPose, null, "  "));

  console.log("Temp is: ", imudata.temperature);
  console.log("Pressure is: ", imudata.pressure);
  console.log("Humidity is: ", imudata.humidity);
}
*/